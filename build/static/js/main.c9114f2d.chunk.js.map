{"version":3,"sources":["assets/img/fruit.svg","assets/img/play1.svg","assets/img/jacket.svg","components/NumRows.js","components/PlateButton.js","App.js","reportWebVitals.js","index.js"],"names":["NumRows","React","forwardRef","props","ref","handleClick","e","target","selectedAnswer","Number","innerText","rightAnswer","style","background","onClick","setTimeout","removeProperty","className","rows","i","push","getNumRows","PlateButton","position","slot","screenWidth","Math","min","window","outerWidth","innerWidth","offsetX","offsetY","x","offsetLeft","y","offsetTop","getPosition","contElem","draggable","onStart","onDrag","onStop","disabled","index","isClickable","styles","transform","cursor","classNames","data-slot-id","btn","closest","classList","add","App","useState","slotElems","setSlotElems","selectedSlotElem","setSelectedSlotElem","matchedPlateElems","setMatchedPlateElems","matchedSlotElems","setMatchedSlotElems","isAllMatched","setIsAllMatched","isAllRightAnswer","setIsAllRightAnswer","setRightAnswer","selectedAnswerElem","setSelectedAnswerElem","isStarted","setIsStarted","isEnd","setIsEnd","wrongMode","setWrongMode","isRunningEndAnimation","setIsRunningEndAnimation","draggingBtn","setDraggingBtn","boradElem","useRef","playWallElem","palyButtonElem","headerElem","rightAnswerElem","numRowsElem","fruitElem","hintWrongElem","hintLabelElem","platePositions","setPlatePositions","setScreenWidth","useEffect","addEventListener","newPositions","jacketWidth","jacketHeight","forEach","item","length","map","elem","plateIndex","toString","match","prevPosition","offset","prev","transitionDuration","trasitionDelay","hideHeaderElem","showHeaderElem","showNumRowElem","handleRightAnswer","handleWrongAnswer","current","firstChild","remove","setRef","isDraggable","contains","isMatchedSlot","isMatched","handleStart","handleDrag","checkMatchSlot","handleStop","plateBtn","slotIndex","newPosition","buttonCenter","getCenterFromBounds","getBoundingClientRect","slots","isSelectedNew","slotCenter","checkXOfSlot","checkYOfSlot","b","s","handlePlateClick","hideHintWrongElem","hideHintLabelElem","board","bounds","boardBounds","opacity","headerBounds","width","transition","hideNumRowElem","runEndAnimation","showHintWrongElem","location","reload","text","animationDuration","hintElem","left","top","height","display","showHintLabelElem","count","labelElem","wallElem","playButton","src","playButtonPic","alt","jacketPic","getSlots","getPlates","answer","fruitPic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9114f2d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/fruit.367f788c.svg\";","export default __webpack_public_path__ + \"static/media/play1.25977739.svg\";","export default __webpack_public_path__ + \"static/media/jacket.a286bec7.svg\";","/**\r\n * The forward ref component for select answer.\r\n * \r\n * <NumRows ref={numRowsElem} rightAnswer=\"1\" onClick={handleEvent}  />\r\n * \r\n * @props props{rightAnswer, onClick}, ref\r\n * @return NumRows component\r\n * \r\n * \r\n * @authour monkeyflytiger@gmail.com\r\n */\r\nimport React from 'react';\r\n\r\nconst NumRows = React.forwardRef((props, ref) => {\r\n  const handleClick = (e) => {\r\n    // The clicked num elem\r\n    const target = e.target;\r\n    // The selected answer\r\n    let selectedAnswer = Number(target.innerText);\r\n    \r\n    // If the answer is right\r\n    if(props.rightAnswer === selectedAnswer) {\r\n      // Change selected answer elem color to success.\r\n      target.style.background = '#90f73b';\r\n      // event emit to parent\r\n      props.onClick(selectedAnswer, target);\r\n    } else {\r\n      // Change selected answer elem color to fail.\r\n      target.style.background = '#f94e4e';\r\n      // event emit to parent\r\n      props.onClick(selectedAnswer);\r\n    }\r\n\r\n    // After 700ms, set initial background\r\n    setTimeout(() => {\r\n      target.style.removeProperty('background');\r\n    }, 700);\r\n  }\r\n\r\n  // Get num rows jsx\r\n  const getNumRows = () => {\r\n    var rows = [];\r\n    for (var i = 1; i <= 8; i++) {\r\n      rows.push(\r\n        <div\r\n          className=\"btn-num\"\r\n          key={i}\r\n          onClick={handleClick}\r\n          >{i}</div>\r\n      );\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  return (\r\n    <div className=\"num-rows\" ref={ref}>\r\n      {getNumRows()}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default NumRows;","import React from 'react';\r\nimport Draggable from 'react-draggable';\r\n\r\n/**\r\n * The component for Plate button\r\n * \r\n * <PlateButton\r\n *  draggable={true|false} If true, return draggable button, else return clickable button\r\n *  onStart={handleEvent}\r\n *  onDrag={handleEvent}\r\n *  onStop={handleEvent}\r\n *  disabled={true|false} - If false, can't drag\r\n *  position={object} - Default position {x, y, slot} {100, 200, 1}\r\n *  slot={ref} - If matched button, slot is matched slot ref\r\n *  onClick={handleEvent}\r\n *  rightAnswer={rightAnswer} - In wrong mode, hint right answer\r\n *  className={string} - Custom class names\r\n *  index={Number} - Plate button index or id\r\n * />\r\n * \r\n * @param {*} props props for draggable module and clickable button for answer is wrong\r\n * @returns The jsx for plate button\r\n */\r\n\r\nconst PlateButton = (props) => {\r\n  let position = props.position;\r\n  // matched slot elem\r\n  let slot = props.slot;\r\n  let screenWidth = Math.min(window.outerWidth, window.innerWidth);\r\n\r\n  const getPosition = () => {\r\n    // Get position of plate to matched slot\r\n    let offsetX = 7;\r\n    let offsetY = 66;\r\n\r\n    if (screenWidth <= 768) {\r\n      offsetX = 1;\r\n      offsetY = 61;\r\n    }\r\n\r\n    return {\r\n      ...position,\r\n      x: slot.offsetLeft - offsetX,\r\n      y: slot.offsetTop - offsetY\r\n    };\r\n  }\r\n\r\n  if(slot) {\r\n    position = getPosition();\r\n  }\r\n  \r\n  // The basic content of component\r\n  // default, sewed and green plate button\r\n  const contElem =\r\n    <div className=\"button-cont\">\r\n      <div className=\"button-img\"></div>\r\n      <div className=\"button-sewed\"></div>\r\n      <div className=\"button-green\"></div>\r\n    </div>;\r\n\r\n  // If draggable\r\n  if (props.draggable) {\r\n    return <Draggable\r\n      onStart={props.onStart}\r\n      onDrag={props.onDrag}\r\n      onStop={props.onStop}\r\n      disabled={props.disabled}\r\n      position={position}>\r\n      <div className={`button-plate plate${props.index} ${props.disabled ? 'matched' : ''}`}>\r\n        {contElem}\r\n      </div>\r\n    </Draggable>;\r\n  }\r\n\r\n  // If clickable\r\n  // In the wrong mode, only clickable that hint answer button (Top to color).\r\n  let isClickable = props.rightAnswer === position.slot;\r\n\r\n  // position, cursor\r\n  let styles = {\r\n    transform: `translate(${position.x}px, ${position.y}px)`,\r\n    cursor: isClickable ? 'pointer' : 'default'\r\n  };\r\n\r\n  // The button click\r\n  const handleClick = (e) => {\r\n    // Add class for animation that changes the sewed to the green button and emit the event to parent.\r\n    const btn = e.target.closest('.button-plate');\r\n    if (isClickable) {\r\n      btn.classList.add('green');\r\n      props.onClick(e);\r\n    }\r\n  };\r\n\r\n  // The class name for buttons\r\n  let classNames = `button-plate plate${props.index} `;\r\n\r\n  if (props.disabled) {\r\n    classNames += ` matched ${props.className}`;\r\n  }\r\n\r\n  return <div\r\n    className={classNames}\r\n    style={styles}\r\n    data-slot-id={position.slot}\r\n    onClick={handleClick}\r\n  >\r\n    {contElem}\r\n  </div>;\r\n};\r\n\r\nexport default PlateButton;","/**\n * The main app\n */\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport \"./App.scss\";\n\n// The fruit picture for end animation\nimport fruitPic from \"./assets/img/fruit.svg\";\n// The play picture\nimport playButtonPic from \"./assets/img/play1.svg\";\n// The jacket picture\nimport jacketPic from \"./assets/img/jacket.svg\";\n\nimport NumRows from \"./components/NumRows\";\nimport PlateButton from \"./components/PlateButton\";\n\nconst App = () => {\n  const [slotElems, setSlotElems] = useState([]); // The array of slot refs\n  const [selectedSlotElem, setSelectedSlotElem] = useState(null); // The slot ref of hovered plate button\n  const [matchedPlateElems, setMatchedPlateElems] = useState([]); // The array of matched plate button refs\n  const [matchedSlotElems, setMatchedSlotElems] = useState([]); //The array of matched slot refs\n  const [isAllMatched, setIsAllMatched] = useState(false); // Is all slots are matched with plate button\n  const [isAllRightAnswer, setIsAllRightAnswer] = useState(null); // Is the basic answer is right\n  const [rightAnswer, setRightAnswer] = useState(1); // In basic answer is wrong mode(hint mode), the right answer\n  const [selectedAnswerElem, setSelectedAnswerElem] = useState(null); // The selected answer ref in num rows\n  const [isStarted, setIsStarted] = useState(false); // Is game started\n  const [isEnd, setIsEnd] = useState(false); //Is game end\n  const [wrongMode, setWrongMode] = useState(false); // Is wrong mode(hint mode), when the basic answer is wrong\n  const [isRunningEndAnimation, setIsRunningEndAnimation] = useState(false); // That is true for running the end animation\n  const [draggingBtn, setDraggingBtn] = useState(null); // dragging button ref\n  const boradElem = useRef(null); // The game board ref\n  const playWallElem = useRef(null); // The play wall ref\n  const palyButtonElem = useRef(null); // The play button ref\n  const headerElem = useRef(null); // The header ref\n  const rightAnswerElem = useRef(null); // The basic right answer ref for animation\n  const numRowsElem = useRef(null); // The num rows ref\n  const fruitElem = useRef(null); // The fruit ref for end animation\n  const hintWrongElem = useRef(null); // The hint ref in wrong mode (Top to color)\n  const hintLabelElem = useRef(null); // The button count hint ref\n\n  // The initial plate buttons position\n  const [platePositions, setPlatePositions] = useState([\n    { x: 986, y: 80, slot: 0 },\n    { x: 686, y: 160, slot: 0 },\n    { x: 786, y: 240, slot: 0 },\n    { x: 900, y: 360, slot: 0 },\n    { x: 934, y: 200, slot: 0 },\n    { x: 986, y: 400, slot: 0 },\n    { x: 700, y: 400, slot: 0 },\n    { x: 840, y: 120, slot: 0 }\n  ]);\n  const [screenWidth, setScreenWidth] = useState(window.outerWidth); // window width for responsive\n  const slotCount = 5; // The total slot count\n  const plateCount = 8; // The total plate button count\n  const slotOffset = 40; // That is offset for select the slot, the plate button is there around the slot\n\n  // when windows resize, get window width\n  useEffect(() => {\n    window.addEventListener('resize',  () => {\n      setScreenWidth(Math.min(window.outerWidth, window.innerWidth));\n    });\n  }, []);\n  // Responsive plate btn position\n  useEffect(() => {\n    let newPositions = [\n      { x: 986, y: 80, slot: 0 },\n      { x: 686, y: 160, slot: 0 },\n      { x: 786, y: 240, slot: 0 },\n      { x: 900, y: 360, slot: 0 },\n      { x: 934, y: 200, slot: 0 },\n      { x: 986, y: 400, slot: 0 },\n      { x: 700, y: 400, slot: 0 },\n      { x: 840, y: 120, slot: 0 }\n    ];\n    if (screenWidth <= 1024) {\n      newPositions = [\n        { x: 660, y: 80, slot: 0 },\n        { x: 622, y: 160, slot: 0 },\n        { x: 706, y: 240, slot: 0 },\n        { x: 600, y: 260, slot: 0 },\n        { x: 534, y: 200, slot: 0 },\n        { x: 492, y: 95, slot: 0 },\n        { x: 438, y: 45, slot: 0 },\n        { x: 465, y: 212, slot: 0 }\n      ];\n    }\n\n    if (screenWidth <= 768) {\n      let jacketWidth = (screenWidth / 100) * 75;\n      let jacketHeight = (screenWidth / 100) * 54;\n      newPositions = [\n        { x: jacketWidth + 10, y: 15, slot: 0 },\n        { x: jacketWidth + 40, y: 90, slot: 0 },\n        { x: jacketWidth + 20, y: jacketHeight + 100, slot: 0 },\n        { x: jacketWidth + 40, y: 350, slot: 0 },\n        { x: 185, y: jacketHeight + 50, slot: 0 },\n        { x: 10, y: jacketHeight + 95, slot: 0 },\n        { x: 100, y: jacketHeight + 45, slot: 0 },\n        { x: 300, y: jacketHeight + 60, slot: 0 }\n      ];\n    }\n\n    // If the plate button is matched, keep matched slot index\n    newPositions.forEach((item, i) => {\n      item.slot = platePositions[i].slot;\n    });\n\n    setPlatePositions(() => {\n      return newPositions;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screenWidth]);\n\n  // When the plate button is matched with the slot, ask the button count\n  useEffect(() => {\n    if (matchedPlateElems.length !== slotCount) return;\n    if (isAllMatched) return;\n\n    setIsAllMatched(true);\n\n    // For animation that gather the plate buttons.\n    matchedPlateElems.map(elem => {\n      // The plate button index\n      const plateIndex = elem.classList\n        .toString()\n        .match(/plate[0-9]/)[0]\n        .match(/[0-9]/)[0];\n\n      const prevPosition = platePositions[plateIndex - 1];\n\n      let offset = 10;\n      if (screenWidth <= 1024) {\n        offset = 5;\n      }\n      if (screenWidth <= 768) {\n        offset = 2;\n      }\n\n      // The new position\n      let position = {\n        ...prevPosition,\n        y: prevPosition.y - (prevPosition.slot - 1) * offset\n      };\n\n      setPlatePositions(prev => {\n        prev[plateIndex - 1] = position;\n        return prev;\n      });\n\n      elem.style.transitionDuration = \"1000ms\";\n      elem.style.trasitionDelay = \"500ms\";\n      setTimeout(() => {\n        elem.style.removeProperty(\"transition-duration\");\n      }, 1000);\n      return null;\n    });\n\n    // Change the header\n    hideHeaderElem();\n    setTimeout(() => {\n      showHeaderElem(\"How many buttons?\");\n      showNumRowElem();\n    }, 500);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matchedPlateElems]);\n\n  // When answer for basic\n  useEffect(() => {\n    if (!isStarted) return;\n\n    // If the basic answer is right\n    if (isAllRightAnswer) {\n      handleRightAnswer();\n      return;\n    }\n\n    // If the basic answer is wrong and not wrong mode\n    if (!isAllRightAnswer && !wrongMode) {\n      setTimeout(() => {\n        handleWrongAnswer();\n      }, 500);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAllRightAnswer]);\n\n  // The end animation\n  useEffect(() => {\n    if (!isEnd) return;\n\n    setTimeout(() => {\n      fruitElem.current.firstChild.classList.remove(\"rotate\");\n      fruitElem.current.firstChild.classList.add(\"shake\");\n    }, 2000);\n    setTimeout(() => {\n      setIsEnd(false);\n      setIsStarted(false);\n    }, 4000);\n  }, [isEnd]);\n\n  // handle event that click the play button - for animation and game start\n  const handlePlay = () => {\n    const wallElem = playWallElem.current;\n    const playButton = palyButtonElem.current;\n\n    wallElem.classList.add(\"fade-out\");\n    playButton.classList.add(\"fade-out\");\n\n    setTimeout(() => {\n      wallElem.style.display = \"none\";\n      playButton.style.display = \"none\";\n    }, 500);\n    setIsStarted(true);\n  };\n\n  // When load, set slot elems\n  const setRef = ref => {\n    if (!ref || slotElems.length > 4) return;\n\n    setSlotElems(prev => {\n      prev.push(ref);\n      return prev;\n    });\n  };\n\n  /**\n   * The plate button is draggable\n   * \n   * @param {number} index - plate button index - 1, 2\n   * @returns true|false - draggable\n   */\n  const isDraggable = index => {\n    let draggable = true;\n\n    matchedPlateElems.forEach(elem => {\n      if (elem.classList.contains(`plate${index}`)) {\n        draggable = false;\n      }\n    });\n\n    return draggable;\n  };\n\n  /**\n   * If the slot is matched, can't match any other plate button\n   * \n   * @param {number} index - slot index - 1, 2\n   * @returns true|false - matched\n   */\n  const isMatchedSlot = index => {\n    let isMatched = false;\n\n    matchedSlotElems.forEach(elem => {\n      if (elem.classList.contains(`slot${index}`)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  };\n\n  // drag start\n  const handleStart = e => {\n    // Change the cursor to grabbing\n    e.target.closest(\".button-plate\").style.cursor = \"grabbing\";\n  };\n\n  // dragging\n  const handleDrag = e => {\n    let btn = e.target.closest(\".button-plate\");\n\n    if(!draggingBtn) {\n      setDraggingBtn(btn);\n    } else {\n      btn = draggingBtn;\n    }\n\n    // set default background of all slot elems\n    slotElems.map(elem => {\n      elem.style.background = \"#00000000\";\n      return null;\n    });\n\n    // Check there is match slot\n    checkMatchSlot(btn);\n    // Change background of selected slot\n    if (selectedSlotElem) {\n      selectedSlotElem.style.background = \"#00000050\";\n    }\n  };\n\n  // drag stop\n  const handleStop = e => {\n    // dragged plate button\n    const plateBtn = draggingBtn\n      ? draggingBtn\n      : e.target.closest(\".button-plate\");\n\n    const plateIndex = plateBtn.classList\n      .toString()\n      .match(/plate[0-9]/)[0]\n      .match(/[0-9]/)[0];\n\n    // there is matched slot\n    if (selectedSlotElem) {\n      const slotIndex = Number(\n        selectedSlotElem.classList\n          .toString()\n          .match(/slot[0-9]/)[0]\n          .match(/[0-9]/)[0]\n      );\n\n      // Change the cursor to grab\n      plateBtn.style.cursor = \"default\";\n      // Set background as default\n      selectedSlotElem.style.background = \"#00000000\";\n\n      // set position of plate to matched slot - animation\n      let offsetX = 7;\n      let offsetY = 66;\n      if (screenWidth <= 768) {\n        offsetX = 1;\n        offsetY = 61;\n      }\n      let newPosition = {\n        x: selectedSlotElem.offsetLeft - offsetX,\n        y: selectedSlotElem.offsetTop - offsetY,\n        slot: slotIndex\n      };\n\n      setPlatePositions(prev => {\n        prev[plateIndex - 1] = newPosition;\n        return prev;\n      });\n\n      // Add matched plate and slot ref\n      setMatchedPlateElems(prev => {\n        return [...prev, plateBtn];\n      });\n      setMatchedSlotElems(prev => {\n        return [...prev, selectedSlotElem];\n      });\n    } else {\n      // there isn't matched slot\n      // Change the cursor to grab\n      plateBtn.style.cursor = \"grab\";\n\n      // The plate button go back to original position\n      plateBtn.style.transitionDuration = \"1000ms\";\n      setTimeout(() => {\n        plateBtn.style.removeProperty(\"transition-duration\");\n      }, 1000);\n    }\n    setDraggingBtn(null)\n    setSelectedSlotElem(null);\n  };\n\n  // Check there is matched slot with dragging plate button\n  const checkMatchSlot = plateBtn => {\n    // Get position x and y of center of plate button\n    const buttonCenter = getCenterFromBounds(plateBtn.getBoundingClientRect());\n    // Find matchs slot\n    let slots = [...(slotElems ?? [])];\n    let isSelectedNew = false;\n\n    slots.forEach(slot => {\n      if (slot.classList.contains(\"matched\")) {\n        return;\n      }\n      // Center x and y of each slot\n      const slotCenter = getCenterFromBounds(slot.getBoundingClientRect());\n      if (\n        checkXOfSlot(buttonCenter, slotCenter) &&\n        checkYOfSlot(buttonCenter, slotCenter)\n      ) {\n        isSelectedNew = true;\n        setSelectedSlotElem(slot);\n        return;\n      }\n\n      if (!isSelectedNew) {\n        setSelectedSlotElem(null);\n      }\n      return null;\n    });\n  };\n\n  const checkXOfSlot = (b, s) => {\n    // Check the available when button exists the right side of the slot\n    if (s.x < b.x && s.x + slotOffset > b.x) {\n      return true;\n    }\n\n    // Check the available when button exists the left side of the slot\n    if (s.x > b.x && s.x - slotOffset < b.x) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const checkYOfSlot = (b, s) => {\n    // Check the available when button exists the top of the slot\n    if (s.y > b.y && s.y - slotOffset < b.y) {\n      return true;\n    }\n\n    // Check the available when button exists the bottom of the slot\n    if (s.y < b.y && s.y + slotOffset > b.y) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // handle event that select answer\n  const handleNumRowClick = (answer, elem) => {\n    // The basic answer is true or wrong\n    if (isAllRightAnswer === null) {\n      setIsAllRightAnswer(prev => {\n        return answer === slotCount;\n      });\n\n      setSelectedAnswerElem(elem);\n      return;\n    }\n\n    // The basic answer is true\n    if (!wrongMode && answer === slotCount) {\n      setTimeout(() => {\n        runEndAnimation();\n      }, 500);\n      return;\n    }\n\n    // The wrong mode(hint)\n    // answer is wrong, don't anything\n    if (answer !== rightAnswer) return;\n\n    // Increase right answer one by one\n    setRightAnswer(prev => {\n      return prev + 1;\n    });\n\n    // Show hint elem of button count with right button count\n    showHintLabelElem(rightAnswer);\n\n    // With increase right answer until the answer is the same basic right answer, ask\n    if (answer !== slotCount) {\n      hideNumRowElem();\n      showHintWrongElem(rightAnswer);\n      return;\n    }\n\n    // If answer is the same basci right answer, ask total count\n    hideHeaderElem();\n    setTimeout(() => {\n      headerElem.current.classList.remove(\"green\");\n      showHeaderElem(\"How many buttons?\");\n    }, 600);\n    setWrongMode(false);\n  };\n\n  // In wrong mode, the clicked plate to green button, ask green button count\n  const handlePlateClick = e => {\n    hideHintWrongElem();\n\n    setTimeout(() => {\n      headerElem.current.classList.add(\"green\");\n      showHeaderElem(\"How many green buttons?\");\n    }, 500);\n\n    setTimeout(() => {\n      hideHintLabelElem();\n      showNumRowElem();\n    }, 500);\n  };\n\n  // The basic answer is right, end animation\n  const handleRightAnswer = () => {\n    // The animaition of right answer elem\n    const elem = rightAnswerElem.current;\n    const board = boradElem.current;\n    elem.innerText = selectedAnswerElem.innerText;\n    let bounds = selectedAnswerElem.getBoundingClientRect();\n    let boardBounds = board.getBoundingClientRect();\n\n    elem.style.transform = `translate(${bounds.x - boardBounds.x}px, ${bounds.y\n      }px)`;\n    elem.style.opacity = 1;\n\n    setTimeout(() => {\n      let headerBounds = headerElem.current.getBoundingClientRect();\n      let offset = 0;\n      if (screenWidth <= 1024) {\n        offset = screenWidth / 100;\n      }\n      let x =\n        headerBounds.width / 1.3 + (boardBounds.x - headerBounds.x) + offset;\n      let y = headerBounds.y + 10;\n      elem.style.transition = \"transform 1000ms\";\n      elem.style.transform = `translate(${x}px, ${y}px)`;\n    }, 500);\n\n    // When finish the animation of right answer elem, hide num rows\n    setTimeout(() => {\n      hideNumRowElem();\n    }, 2000);\n\n    setTimeout(() => {\n      runEndAnimation();\n    }, 2500);\n  };\n\n  // If the basic answer is wrong\n  const handleWrongAnswer = () => {\n    hideHeaderElem();\n    hideNumRowElem();\n    showHintWrongElem();\n    setWrongMode(true);\n  };\n\n  // The end animation\n  const runEndAnimation = () => {\n    setIsRunningEndAnimation(true);\n    hideHeaderElem();\n    hideHintLabelElem();\n    hideNumRowElem();\n\n    // Hide all elems\n    if (rightAnswerElem.current.innerText) {\n      rightAnswerElem.current.classList.add(\"fade-out\");\n    }\n\n    matchedPlateElems.map((elem, i) => {\n      elem.classList.add(\"fade-out\");\n      return null;\n    });\n\n    setTimeout(() => {\n      setIsEnd(true);\n    }, 500);\n\n    setTimeout(() => {\n      window.location.reload();\n    }, 4000);\n  };\n\n  /**\n   * Show header elem\n   * @param {string} text The header text\n   */\n  const showHeaderElem = text => {\n    const elem = headerElem.current;\n    elem.innerText = text;\n    elem.style.animationDuration = \"1s\";\n\n    elem.classList.remove(\"fade-out\");\n    elem.classList.add(\"fade-in\");\n  };\n\n  // Hide header elem\n  const hideHeaderElem = () => {\n    const elem = headerElem.current;\n    elem.classList.remove(\"fade-in\");\n    elem.classList.add(\"fade-out\");\n  };\n\n  /**\n   * Show hint wrong elem (top to color)\n   * \n   * @param {number} slotIndex \n   */\n  const showHintWrongElem = (slotIndex = 0) => {\n    setTimeout(() => {\n      // Get bounding rect of that slot elem for show hint popup.\n      const position = slotElems[slotIndex].getBoundingClientRect();\n      // Get bounding rect of palyground board elem.\n      const boardBounds = boradElem.current.getBoundingClientRect();\n      const hintElem = hintWrongElem.current;\n      let offsetX = 20;\n      let offsetY = 10;\n\n      offsetY = screenWidth <= 1024 ? 6 : offsetY;\n\n      offsetX = screenWidth <= 768 ? -30 : offsetX;\n      offsetY = screenWidth <= 768 ? 0 : offsetY;\n\n      // Get the hint wrong elem position left by slot position.\n      let hintElemWidth = 144;\n      let left = position.left - boardBounds.left - hintElemWidth - offsetX;\n\n      // Get the hint wrong elem position top by slot position\n      let top = position.top - slotIndex * offsetY;\n\n      // To the hint elem should be to the center of the slot elem.\n      // 29 is hint elem height.\n      top = screenWidth >= 768 ? top : top + (position.height - 29) / 2;\n\n      hintElem.style.left = left + \"px\";\n      hintElem.style.top = top + \"px\";\n\n      hintElem.style.display = \"block\";\n      hintElem.classList.remove(\"fade-out\");\n      hintElem.classList.add(\"fade-in\");\n    }, 500);\n  };\n\n  const hideHintWrongElem = () => {\n    setTimeout(() => {\n      const hintElem = hintWrongElem.current;\n      hintElem.classList.remove(\"fade-in\");\n      hintElem.classList.add(\"fade-out\");\n\n      setTimeout(() => {\n        hintElem.style.display = \"none\";\n      }, 500);\n    }, 500);\n  };\n\n  const showNumRowElem = () => {\n    const elem = numRowsElem.current;\n    elem.style.display = \"flex\";\n    elem.classList.remove(\"fade-out-bottom\");\n    elem.classList.add(\"fade-in-bottom\");\n  };\n\n  const hideNumRowElem = () => {\n    const elem = numRowsElem.current;\n\n    setTimeout(() => {\n      elem.classList.remove(\"fade-in-bottom\");\n      elem.classList.add(\"fade-out-bottom\");\n    }, 500);\n\n    setTimeout(() => {\n      elem.style.display = \"none\";\n    }, 900);\n  };\n\n  const showHintLabelElem = (count = 1) => {\n    let labelElem = hintLabelElem.current;\n    labelElem.innerText = `${count} button${count > 1 ? \"s\" : \"\"}`;\n    labelElem.classList.remove(\"fade-out\");\n    labelElem.classList.add(\"fade-in\");\n  };\n\n  const hideHintLabelElem = () => {\n    let labelElem = hintLabelElem.current;\n    labelElem.classList.remove(\"fade-in\");\n    labelElem.classList.add(\"fade-out\");\n  };\n\n  /**\n   * Get center position from boundings\n   * @param {object} bounds  {x, y, width, height}\n   * @returns \n   */\n  const getCenterFromBounds = bounds => {\n    return { x: bounds.x + bounds.width / 2, y: bounds.y + bounds.height / 2 };\n  };\n\n  // Get jsx of slot\n  const getSlots = () => {\n    var rows = [];\n    for (var i = 1; i <= slotCount; i++) {\n      rows.push(\n        <div\n          ref={setRef}\n          className={`slot slot${i} ${isMatchedSlot(i) ? \"matched\" : \"\"}`}\n          key={i}\n        ></div>\n      );\n    }\n    return rows;\n  };\n\n  // Get plates\n  const getPlates = () => {\n    var rows = [];\n\n    for (var i = 1; i <= plateCount; i++) {\n      let disabled = !isDraggable(i);\n      let draggable = isStarted && isAllRightAnswer !== false;\n      let position = platePositions[i - 1];\n      // If the plate button is matched, matched slot\n      let slot = position.slot > 0 ? slotElems[position.slot - 1] : null;\n      \n      rows.push(\n        <PlateButton\n          draggable={draggable}\n          onStart={handleStart}\n          onDrag={handleDrag}\n          onStop={handleStop}\n          disabled={disabled}\n          position={position}\n          slot={slot}\n          rightAnswer={rightAnswer}\n          onClick={handlePlateClick}\n          className={isRunningEndAnimation ? \"fade-out\" : \"\"}\n          index={i}\n          key={i}\n        />\n      );\n    }\n    return rows;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"play-button-wall\" ref={playWallElem}></div>\n      <div className=\"play-button\" onClick={handlePlay} ref={palyButtonElem}>\n        <img src={playButtonPic} alt=\"\" className=\"img\" />\n      </div>\n      <div\n        className={`board ${isAllMatched ? \"all-matched\" : \"\"}`}\n        ref={boradElem}\n      >\n        <div ref={headerElem} className=\"header\">\n          Sew the buttons on the jacket\n        </div>\n        <div className=\"jacket\">\n          <img src={jacketPic} alt=\"\" />\n        </div>\n        {getSlots()}\n        {getPlates()}\n\n        <NumRows\n          rightAnswer={wrongMode ? rightAnswer : slotCount}\n          onClick={handleNumRowClick}\n          ref={numRowsElem}\n        />\n        <div ref={rightAnswerElem} className=\"right-answer\"></div>\n        <div ref={hintWrongElem} className=\"hint-wrong\">\n          <div className=\"content\">Tap to color</div>\n          <div className=\"corner\"></div>\n        </div>\n        <div className=\"hint-label\" ref={hintLabelElem}></div>\n        {isEnd && (\n          <div className=\"end-animation\">\n            <div>\n              <div className=\"title\">Great!</div>\n              <div className=\"fruit bounce-left-right\" ref={fruitElem}>\n                <img src={fruitPic} alt=\"Fruit\" className=\"rotate\" />\n              </div>\n              <div className=\"mask\"></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}