{"version":3,"sources":["assets/img/fruit.svg","components/NumRows.js","components/PlateButton.js","App.js","reportWebVitals.js","index.js"],"names":["NumRows","React","forwardRef","props","ref","handleClick","e","target","clickedAnswer","Number","innerText","rightAnswer","onClick","style","background","setTimeout","removeProperty","className","rows","i","push","getNumRows","PlateButton","draggable","onStart","onDrag","onStop","disabled","position","index","isClickable","slot","styles","transform","x","y","cursor","classNames","data-slot-id","btn","closest","classList","add","App","useState","slotElems","setSlotElems","selectedSlotElem","setSelectedSlotElem","matchedPlateElems","setMatchedPlateElems","matchedSlotElems","setMatchedSlotElems","isAllMatched","setIsAllMatched","isAllRightAnswer","setIsAllRightAnswer","setRightAnswer","selectedAnswerElem","setSelectedAnswerElem","isStarted","setIsStarted","isEnd","setIsEnd","wrongMode","setWrongMode","isRunningEndAnimation","setIsRunningEndAnimation","boradElem","useRef","playWallElem","palyButtonElem","headerElem","rightAnswerElem","numRowsElem","fruitElem","hintWrongElem","hintLabelElem","platePositions","setPlatePositions","draggingBtn","useEffect","length","map","elem","plateIndex","toString","match","prevPosition","prev","transitionDuration","trasitionDelay","hideHeaderElem","showHeaderElem","showNumRowElem","handleRightAnswer","handleWrongAnswer","current","firstChild","remove","handlePlay","wallElem","playButton","display","console","log","setRef","isDraggable","forEach","contains","isMatchedSlot","isMatched","handleStart","handleDrag","checkMatchSlot","handleStop","plateBtn","slotIndex","newPosition","offsetLeft","offsetTop","buttonCenter","getCenterFromBounds","getBoundingClientRect","slots","isSelectedNew","slotCenter","checkXOfSlot","checkYOfSlot","b","s","handlePlateClick","hideHintWrongElem","hideHintLabelElem","board","bounds","boardBounds","opacity","headerBounds","width","transition","hideNumRowElem","runEndAnimation","showHintWrongElem","text","animationDuration","hintElem","top","left","showHintLabelElem","count","labelElem","height","onTouchStart","getSlots","getPlates","answer","src","Fruit","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5fc911e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/fruit.367f788c.svg\";","import React from 'react';\r\n\r\nconst NumRows = React.forwardRef((props, ref) => {\r\n  const handleClick = (e) => {\r\n    const target = e.target;\r\n    let clickedAnswer = Number(target.innerText);\r\n    \r\n    if(props.rightAnswer === clickedAnswer) {\r\n      props.onClick(clickedAnswer, target);\r\n      target.style.background = '#90f73b';\r\n    } else {\r\n      target.style.background = '#f94e4e';\r\n      props.onClick(clickedAnswer);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      target.style.removeProperty('background');\r\n    }, 700);\r\n  }\r\n\r\n  const getNumRows = () => {\r\n    var rows = [];\r\n    for (var i = 1; i <= 8; i++) {\r\n      rows.push(\r\n        <div\r\n          className=\"btn-num\"\r\n          key={i}\r\n          onClick={handleClick}\r\n          >{i}</div>\r\n      );\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  return (\r\n    <div className=\"num-rows\" ref={ref}>\r\n      {getNumRows()}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default NumRows;","import React from 'react';\r\nimport Draggable from 'react-draggable';\r\n\r\nconst PlateButton = (props) => {\r\n  if (props.draggable) {\r\n    return <Draggable\r\n      onStart={props.onStart}\r\n      onDrag={props.onDrag}\r\n      onStop={props.onStop}\r\n      disabled={props.disabled}\r\n      position={props.position}\r\n      onClick={props.onClick}>\r\n      <div className={`button-plate plate${props.index} ${props.disabled ? 'matched' : ''}`}>\r\n        <div className=\"button-cont\">\r\n          <div className=\"button-img\"></div>\r\n          <div className=\"button-sewed\"></div>\r\n          <div className=\"button-green\"></div>\r\n        </div>\r\n      </div>\r\n    </Draggable>;\r\n  }\r\n\r\n  let isClickable = props.rightAnswer === props.position.slot;\r\n\r\n  let styles = {\r\n    transform: `translate(${props.position.x}px, ${props.position.y}px)`,\r\n    cursor: isClickable ? 'pointer' : 'default'\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    const btn = e.target.closest('.button-plate');\r\n\r\n    if(isClickable) {\r\n      btn.classList.add('green');\r\n      props.onClick(e);\r\n    }\r\n  };\r\n  let classNames = `button-plate plate${props.index} `;\r\n\r\n  if(props.disabled) {\r\n    classNames += ` matched ${props.className}`;\r\n  }\r\n  \r\n  return <div\r\n    className={classNames}\r\n    style={styles}\r\n    data-slot-id={props.position.slot}\r\n    onClick={handleClick}\r\n  >\r\n    <div className=\"button-cont\">\r\n      <div className=\"button-img\"></div>\r\n      <div className=\"button-sewed\"></div>\r\n      <div className=\"button-green\"></div>\r\n    </div>\r\n  </div>;\r\n};\r\n\r\nexport default PlateButton;","import React, { useState, useEffect, useRef } from \"react\";\n\nimport \"./App.scss\";\nimport Fruit from \"./assets/img/fruit.svg\";\n\nimport NumRows from \"./components/NumRows\";\nimport PlateButton from \"./components/PlateButton\";\n\nconst App = () => {\n  const [slotElems, setSlotElems] = useState([]);\n  const [selectedSlotElem, setSelectedSlotElem] = useState(null);\n  const [matchedPlateElems, setMatchedPlateElems] = useState([]);\n  const [matchedSlotElems, setMatchedSlotElems] = useState([]);\n  const [isAllMatched, setIsAllMatched] = useState(false);\n  const [isAllRightAnswer, setIsAllRightAnswer] = useState(null);\n  const [rightAnswer, setRightAnswer] = useState(1);\n  const [selectedAnswerElem, setSelectedAnswerElem] = useState(null);\n  const [isStarted, setIsStarted] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const [wrongMode, setWrongMode] = useState(false);\n  const [isRunningEndAnimation, setIsRunningEndAnimation] = useState(false);\n  const boradElem = useRef(null);\n  const playWallElem = useRef(null);\n  const palyButtonElem = useRef(null);\n  const headerElem = useRef(null);\n  const rightAnswerElem = useRef(null);\n  const numRowsElem = useRef(null);\n  const fruitElem = useRef(null);\n  const hintWrongElem = useRef(null);\n  const hintLabelElem = useRef(null);\n\n  const [platePositions, setPlatePositions] = useState([\n    { x: 986, y: 80, slot: 0 },\n    { x: 686, y: 160, slot: 0 },\n    { x: 786, y: 240, slot: 0 },\n    { x: 900, y: 360, slot: 0 },\n    { x: 934, y: 200, slot: 0 },\n    { x: 986, y: 400, slot: 0 },\n    { x: 700, y: 400, slot: 0 },\n    { x: 840, y: 120, slot: 0 }\n  ]);\n  const slotCount = 5;\n  const plateCount = 8;\n  const slotOffset = 40;\n  let draggingBtn = null;\n\n  useEffect(() => {\n    if (matchedPlateElems.length !== slotCount) return;\n    if (isAllMatched) return;\n\n    setIsAllMatched(true);\n\n    matchedPlateElems.map(elem => {\n      const plateIndex = elem.classList\n        .toString()\n        .match(/plate[0-9]/)[0]\n        .match(/[0-9]/)[0];\n      const prevPosition = platePositions[plateIndex - 1];\n      let position = {\n        ...prevPosition,\n        y: prevPosition.y - (prevPosition.slot - 1) * 10\n      };\n\n      setPlatePositions(prev => {\n        prev[plateIndex - 1] = position;\n        return prev;\n      });\n\n      elem.style.transitionDuration = \"1000ms\";\n      elem.style.trasitionDelay = \"500ms\";\n      setTimeout(() => {\n        elem.style.removeProperty(\"transition-duration\");\n      }, 1000);\n      return null;\n    });\n    hideHeaderElem();\n\n    setTimeout(() => {\n      showHeaderElem(\"How many buttons?\");\n      showNumRowElem();\n    }, 500);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matchedPlateElems]);\n\n  useEffect(() => {\n    if (!isStarted) return;\n\n    if (isAllRightAnswer) {\n      handleRightAnswer();\n      return;\n    }\n\n    if (!isAllRightAnswer && !wrongMode) {\n      setTimeout(() => {\n        handleWrongAnswer();\n      }, 500);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isAllRightAnswer]);\n\n  useEffect(() => {\n    if (!isEnd) return;\n\n    setTimeout(() => {\n      fruitElem.current.firstChild.classList.remove(\"rotate\");\n      fruitElem.current.firstChild.classList.add(\"shake\");\n    }, 2000);\n    setTimeout(() => {\n      setIsEnd(false);\n      setIsStarted(false);\n    }, 4000);\n  }, [isEnd]);\n\n  const handlePlay = () => {\n    const wallElem = playWallElem.current;\n    const playButton = palyButtonElem.current;\n\n    wallElem.classList.add('fade-out');\n    playButton.classList.add('fade-out');\n\n    setTimeout(() => {\n      wallElem.style.display = 'none';\n      console.log(wallElem)\n      playButton.style.display = 'none';\n    }, 500);\n    setIsStarted(true);\n  }\n\n  const setRef = ref => {\n    if (!ref || slotElems.length > 4) return;\n\n    setSlotElems(prev => {\n      prev.push(ref);\n      return prev;\n    });\n  };\n\n  const isDraggable = index => {\n    let draggable = true;\n\n    matchedPlateElems.forEach(elem => {\n      if (elem.classList.contains(`plate${index}`)) {\n        draggable = false;\n      }\n    });\n\n    return draggable;\n  };\n\n  const isMatchedSlot = index => {\n    let isMatched = false;\n\n    matchedSlotElems.forEach(elem => {\n      if (elem.classList.contains(`slot${index}`)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  };\n\n  const handleStart = e => {\n    // Change the cursor to grabbing\n    e.target.closest(\".button-plate\").style.cursor = \"grabbing\";\n  };\n\n  const handleDrag = e => {\n    draggingBtn = draggingBtn ? draggingBtn : e.target.closest(\".button-plate\");\n    slotElems.map(elem => {\n      elem.style.background = \"#00000000\";\n      return null;\n    });\n    checkMatchSlot(draggingBtn);\n    if (selectedSlotElem) {\n      selectedSlotElem.style.background = \"#00000050\";\n    }\n  };\n\n  const handleStop = e => {\n    const plateBtn = draggingBtn\n      ? draggingBtn\n      : e.target.closest(\".button-plate\");\n    const plateIndex = plateBtn.classList\n      .toString()\n      .match(/plate[0-9]/)[0]\n      .match(/[0-9]/)[0];\n\n    if (selectedSlotElem) {\n      const slotIndex = Number(\n        selectedSlotElem.classList\n          .toString()\n          .match(/slot[0-9]/)[0]\n          .match(/[0-9]/)[0]\n      );\n\n      // Change the cursor to grab\n      plateBtn.style.cursor = \"default\";\n      selectedSlotElem.style.background = \"#00000000\";\n\n      let newPosition = {\n        x: selectedSlotElem.offsetLeft - 17,\n        y: selectedSlotElem.offsetTop - 78,\n        slot: slotIndex\n      };\n\n      setPlatePositions(prev => {\n        prev[plateIndex - 1] = newPosition;\n        return prev;\n      });\n      setMatchedPlateElems(prev => {\n        return [...prev, plateBtn];\n      });\n      setMatchedSlotElems(prev => {\n        return [...prev, selectedSlotElem];\n      });\n    } else {\n      // Change the cursor to grab\n      plateBtn.style.cursor = \"grab\";\n\n      plateBtn.style.transitionDuration = \"1000ms\";\n      setTimeout(() => {\n        plateBtn.style.removeProperty(\"transition-duration\");\n      }, 1000);\n    }\n    draggingBtn = null;\n    setSelectedSlotElem(null);\n  };\n\n  const checkMatchSlot = plateBtn => {\n    // Get btn center x and y\n    const buttonCenter = getCenterFromBounds(plateBtn.getBoundingClientRect());\n    // Find matchs slot\n    let slots = [...(slotElems ?? [])];\n    let isSelectedNew = false;\n\n    slots.forEach(slot => {\n      if (slot.classList.contains(\"matched\")) {\n        return;\n      }\n      // Center x and y of each slot\n      const slotCenter = getCenterFromBounds(slot.getBoundingClientRect());\n      if (\n        checkXOfSlot(buttonCenter, slotCenter) &&\n        checkYOfSlot(buttonCenter, slotCenter)\n      ) {\n        isSelectedNew = true;\n        setSelectedSlotElem(slot);\n        return;\n      }\n\n      if (!isSelectedNew) {\n        setSelectedSlotElem(null);\n      }\n      return null;\n    });\n  };\n\n  const checkXOfSlot = (b, s) => {\n    // Check the available when button exists the right side of the slot\n    if (s.x < b.x && s.x + slotOffset > b.x) {\n      return true;\n    }\n\n    // Check the available when button exists the left side of the slot\n    if (s.x > b.x && s.x - slotOffset < b.x) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const checkYOfSlot = (b, s) => {\n    // Check the available when button exists the top of the slot\n    if (s.y > b.y && s.y - slotOffset < b.y) {\n      return true;\n    }\n\n    // Check the available when button exists the bottom of the slot\n    if (s.y < b.y && s.y + slotOffset > b.y) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const handleNumRowClick = (answer, elem) => {\n    if (isAllRightAnswer === null) {\n      setIsAllRightAnswer(prev => {\n        return answer === slotCount;\n      });\n\n      setSelectedAnswerElem(elem);\n      return;\n    }\n\n    if (!wrongMode && answer === slotCount) {\n      setTimeout(() => {\n        runEndAnimation();\n      }, 500);\n      return;\n    }\n\n    if (answer !== rightAnswer) return;\n\n    setRightAnswer(prev => {\n      return prev + 1;\n    });\n\n    showHintLabelElem(rightAnswer);\n\n    if (answer !== slotCount) {\n      hideNumRowElem();\n      showHintWrongElem(rightAnswer);\n      return;\n    }\n\n    hideHeaderElem();\n    setTimeout(() => {\n      headerElem.current.classList.remove(\"green\");\n      showHeaderElem(\"How many buttons?\");\n    }, 600);\n    setWrongMode(false);\n  };\n\n  const handlePlateClick = e => {\n    hideHintWrongElem();\n\n    setTimeout(() => {\n      headerElem.current.classList.add(\"green\");\n      showHeaderElem(\"How many green buttons?\");\n    }, 500);\n\n    setTimeout(() => {\n      hideHintLabelElem();\n      showNumRowElem();\n    }, 500);\n  };\n\n  const handleRightAnswer = () => {\n    const elem = rightAnswerElem.current;\n    const board = boradElem.current;\n    elem.innerText = selectedAnswerElem.innerText;\n    let bounds = selectedAnswerElem.getBoundingClientRect();\n    let boardBounds = board.getBoundingClientRect();\n\n    elem.style.transform = `translate(${bounds.x - boardBounds.x}px, ${\n      bounds.y\n    }px)`;\n    elem.style.opacity = 1;\n\n    setTimeout(() => {\n      let headerBounds = headerElem.current.getBoundingClientRect();\n      let x = headerBounds.width / 1.4 + (boardBounds.x - headerBounds.x);\n      let y = headerBounds.y + 10;\n      elem.style.transition = \"transform 1000ms\";\n      elem.style.transform = `translate(${x}px, ${y}px)`;\n    }, 500);\n\n    setTimeout(() => {\n      hideNumRowElem();\n    }, 2000);\n\n    setTimeout(() => {\n      runEndAnimation();\n    }, 2500);\n  };\n\n  const handleWrongAnswer = () => {\n    hideHeaderElem();\n    hideNumRowElem();\n    showHintWrongElem();\n    setWrongMode(true);\n  };\n\n  const runEndAnimation = () => {\n    setIsRunningEndAnimation(true);\n    hideHeaderElem();\n    hideHintLabelElem();\n    hideNumRowElem();\n    rightAnswerElem.current.classList.add(\"fade-out\");\n    matchedPlateElems.map((elem, i) => {\n      elem.classList.add(\"fade-out\");\n      return null;\n    });\n\n    setTimeout(() => {\n      setIsEnd(true);\n    }, 500);\n  };\n\n  const showHeaderElem = text => {\n    const elem = headerElem.current;\n    elem.innerText = text;\n    elem.style.animationDuration = \"1s\";\n\n    elem.classList.remove(\"fade-out\");\n    elem.classList.add(\"fade-in\");\n  };\n\n  const hideHeaderElem = () => {\n    const elem = headerElem.current;\n    elem.classList.remove(\"fade-in\");\n    elem.classList.add(\"fade-out\");\n  };\n\n  const showHintWrongElem = (slotIndex = 0) => {\n    setTimeout(() => {\n      const position = slotElems[slotIndex].getBoundingClientRect();\n      const boardBounds = boradElem.current.getBoundingClientRect();\n      const hintElem = hintWrongElem.current;\n      let offset = 20;\n      let top = position.top - slotIndex * 10;\n      let hintElemWidth = 144;\n      let left = position.left - boardBounds.left - hintElemWidth - offset;\n\n      hintElem.style.left = left + \"px\";\n      hintElem.style.top = top + \"px\";\n\n      hintElem.style.display = \"block\";\n      hintElem.classList.remove(\"fade-out\");\n      hintElem.classList.add(\"fade-in\");\n    }, 500);\n  };\n\n  const hideHintWrongElem = () => {\n    setTimeout(() => {\n      const hintElem = hintWrongElem.current;\n      hintElem.classList.remove(\"fade-in\");\n      hintElem.classList.add(\"fade-out\");\n\n      setTimeout(() => {\n        hintElem.style.display = \"none\";\n      }, 500);\n    }, 500);\n  };\n\n  const showNumRowElem = () => {\n    const elem = numRowsElem.current;\n    elem.style.display = \"flex\";\n    elem.classList.remove(\"fade-out-bottom\");\n    elem.classList.add(\"fade-in-bottom\");\n  };\n\n  const hideNumRowElem = () => {\n    const elem = numRowsElem.current;\n\n    setTimeout(() => {\n      elem.classList.remove(\"fade-in-bottom\");\n      elem.classList.add(\"fade-out-bottom\");\n    }, 500);\n\n    setTimeout(() => {\n      elem.style.display = \"none\";\n    }, 900);\n  };\n\n  const showHintLabelElem = (count = 1) => {\n    let labelElem = hintLabelElem.current;\n    labelElem.innerText = `${count} button${count > 1 ? \"s\" : \"\"}`;\n    labelElem.classList.remove(\"fade-out\");\n    labelElem.classList.add(\"fade-in\");\n  };\n\n  const hideHintLabelElem = () => {\n    let labelElem = hintLabelElem.current;\n    labelElem.classList.remove(\"fade-in\");\n    labelElem.classList.add(\"fade-out\");\n  };\n\n  const getCenterFromBounds = bounds => {\n    return { x: bounds.x + bounds.width / 2, y: bounds.y + bounds.height / 2 };\n  };\n\n  const getSlots = () => {\n    var rows = [];\n    for (var i = 1; i <= slotCount; i++) {\n      rows.push(\n        <div\n          ref={setRef}\n          className={`slot slot${i} ${isMatchedSlot(i) ? \"matched\" : \"\"}`}\n          key={i}\n        ></div>\n      );\n    }\n    return rows;\n  };\n\n  const getPlates = () => {\n    var rows = [];\n\n    for (var i = 1; i <= plateCount; i++) {\n      let disabled = !isDraggable(i);\n      let draggable = isStarted && isAllRightAnswer !== false;\n\n      rows.push(\n        <PlateButton\n          draggable={draggable}\n          onStart={handleStart}\n          onDrag={handleDrag}\n          onStop={handleStop}\n          disabled={disabled}\n          position={platePositions[i - 1]}\n          rightAnswer={rightAnswer}\n          onClick={handlePlateClick}\n          className={isRunningEndAnimation ? \"fade-out\" : \"\"}\n          index={i}\n          key={i}\n        />\n      );\n    }\n    return rows;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"play-button-wall\" ref={playWallElem}></div>\n      <div\n        className=\"play-button\"\n        onTouchStart={handlePlay}\n        onClick={handlePlay}\n        ref={palyButtonElem}\n      ></div>\n      <div\n        className={`board ${isAllMatched ? \"all-matched\" : \"\"}`}\n        ref={boradElem}\n      >\n        <div ref={headerElem} className=\"header\">\n          Sew the buttons on the jacket\n        </div>\n        <div className=\"jacket\"></div>\n        {getSlots()}\n        {getPlates()}\n\n        <NumRows\n          rightAnswer={wrongMode ? rightAnswer : slotCount}\n          onClick={handleNumRowClick}\n          ref={numRowsElem}\n        />\n        <div ref={rightAnswerElem} className=\"right-answer\"></div>\n        <div ref={hintWrongElem} className=\"hint-wrong\">\n          <div className=\"content\">Tap to color</div>\n          <div className=\"corner\"></div>\n        </div>\n        <div className=\"hint-label\" ref={hintLabelElem}></div>\n        {isEnd && (\n          <div className=\"end-animation\">\n            <div>\n              <div className=\"title\">Great!</div>\n              <div className=\"fruit bounce-left-right\" ref={fruitElem}>\n                <img src={Fruit} alt=\"Fruit\" className=\"rotate\" />\n              </div>\n              <div className=\"mask\"></div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}